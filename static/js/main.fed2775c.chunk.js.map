{"version":3,"sources":["components/Message.js","components/MessageList.js","components/MessageInput.js","components/ChatWindow.js","App.js","reportWebVitals.js","index.js"],"names":["Message","_ref","sender","text","React","createElement","className","concat","MessageList","messages","map","msg","index","key","MessageInput","onSendMessage","setText","useState","onSubmit","e","preventDefault","trim","type","value","onChange","target","placeholder","ChatWindow","setMessages","async","newMessage","response","axios","post","que","headers","botMessage","data","error","console","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0NAUeA,MARCC,IAAuB,IAAtB,OAAEC,EAAM,KAAEC,GAAMF,EAC7B,OACIG,IAAAC,cAAA,OAAKC,UAAS,WAAAC,OAAaL,IACtBC,ICQEK,MAVKP,IAAmB,IAAlB,SAAEQ,GAAUR,EAC7B,OACIG,IAAAC,cAAA,OAAKC,UAAU,gBACVG,EAASC,IAAI,CAACC,EAAKC,IAChBR,IAAAC,cAACL,EAAO,CAACa,IAAKD,EAAOV,OAAQS,EAAIT,OAAQC,KAAMQ,EAAIR,UCmBpDW,MAxBMb,IAAwB,IAAvB,cAAEc,GAAed,EACnC,MAAOE,EAAMa,GAAWC,mBAAS,IAUjC,OACIb,IAAAC,cAAA,QAAMC,UAAU,gBAAgBY,SATdC,IAClBA,EAAEC,iBACEjB,EAAKkB,SACLN,EAAcZ,GACda,EAAQ,OAMRZ,IAAAC,cAAA,SACIiB,KAAK,OACLC,MAAOpB,EACPqB,SAAWL,GAAMH,EAAQG,EAAEM,OAAOF,OAClCG,YAAY,8BAEhBtB,IAAAC,cAAA,UAAQiB,KAAK,UAAS,UCsBnBK,MAtCIA,KACf,MAAOlB,EAAUmB,GAAeX,mBAAS,IA4BzC,OACIb,IAAAC,cAAA,OAAKC,UAAU,eACXF,IAAAC,cAAA,OAAKC,UAAU,eAAc,WAC7BF,IAAAC,cAACG,EAAW,CAACC,SAAUA,IACvBL,IAAAC,cAACS,EAAY,CAACC,cA9BIc,UACtB,MAAMC,EAAa,CAAE5B,OAAQ,OAAQC,QACrCyB,EAAY,IAAInB,EAAUqB,IAE1B,IACI,MAAMC,QAAiBC,IAAMC,KAAK,6BAChC,CAAEC,IAAK/B,GACP,CACEgC,QAAS,CACP,eAAgB,sBAGtB,IAAIC,EAEAA,EADAL,EAASM,KAAKN,SACD,CAAE7B,OAAQ,MAAOC,KAAM4B,EAASM,KAAKN,UAC3CA,EAASM,KAAKC,MACR,CAAEpC,OAAQ,MAAOC,KAAM4B,EAASM,KAAKC,OAErC,CAAEpC,OAAQ,MAAOC,KAAM,8BAExCyB,EAAY,IAAInB,EAAUqB,EAAYM,IACxC,MAAOE,GACLC,QAAQD,MAAM,yBAA0BA,SClBrCE,MARf,WACI,OACIpC,IAAAC,cAAA,OAAKC,UAAU,OACXF,IAAAC,cAACsB,EAAU,QCKRc,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAK3C,IAAkD,IAAjD,OAAE4C,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAShD,EACpE4C,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHlD,IAAAC,cAACD,IAAMmD,WAAU,KACfnD,IAAAC,cAACmC,EAAG,QAORC,K","file":"static/js/main.fed2775c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Message = ({ sender, text }) => {\n    return (\n        <div className={`message ${sender}`}>\n            {text}\n        </div>\n    );\n};\n\nexport default Message;\n","import React from 'react';\nimport Message from './Message';\n\nconst MessageList = ({ messages }) => {\n    return (\n        <div className=\"message-list\">\n            {messages.map((msg, index) => (\n                <Message key={index} sender={msg.sender} text={msg.text} />\n            ))}\n        </div>\n    );\n};\n\nexport default MessageList;\n","import React, { useState } from 'react';\n\nconst MessageInput = ({ onSendMessage }) => {\n    const [text, setText] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (text.trim()) {\n            onSendMessage(text);\n            setText('');\n        }\n    };\n\n    return (\n        <form className=\"message-input\" onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                placeholder=\"Type your message here...\"\n            />\n            <button type=\"submit\">Send</button>\n        </form>\n    );\n};\n\nexport default MessageInput;\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\n\nconst ChatWindow = () => {\n    const [messages, setMessages] = useState([]);\n\n    const handleSendMessage = async (text) => {\n        const newMessage = { sender: 'user', text };\n        setMessages([...messages, newMessage]);\n\n        try {\n            const response = await axios.post('http://localhost:8000/chat',\n              { que: text },\n              {\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n            let botMessage;\n            if (response.data.response) {\n                botMessage = { sender: 'bot', text: response.data.response };\n            } else if (response.data.error) {\n                botMessage = { sender: 'bot', text: response.data.error };\n            } else {\n                botMessage = { sender: 'bot', text: 'An unknown error occurred.' };\n            }\n            setMessages([...messages, newMessage, botMessage]);\n        } catch (error) {\n            console.error('Error sending message:', error);\n        }\n    };\n\n    return (\n        <div className=\"chat-window\">\n            <div className=\"chat-header\">Chatbot</div>\n            <MessageList messages={messages} />\n            <MessageInput onSendMessage={handleSendMessage} />\n        </div>\n    );\n};\n\nexport default ChatWindow;\n","import React from 'react';\nimport './App.css';\nimport ChatWindow from './components/ChatWindow';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ChatWindow />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}